package comp1110.ass2;

import java.util.ArrayList;

/**
 * Created by wenjunyang on 8/10/17.
 */
public class StartPointGenerator {
    /**
     * Helper for task 11
     * Generate all the possible startPoints which contains three masks (the solution of startPoints should be unique)
     * P.s The generator for generating the startPoints with four, five and six masks are not included
     * since they can be generated by solving the startPoints
     * @return An arrayList which contains all the combination of different state of masks
     */
    public static ArrayList<String> spGeneratorForThree(){
        ArrayList<String> A = MaskGenerator.maskGenerator1('A'); ArrayList<String> B = MaskGenerator.maskGenerator2();
        ArrayList<String> C = MaskGenerator.maskGenerator1('C'); ArrayList<String> D = MaskGenerator.maskGenerator1('D');
        ArrayList<String> E = MaskGenerator.maskGenerator3(); ArrayList<String> F = MaskGenerator.maskGenerator1('F');
        ArrayList<String> G = MaskGenerator.maskGenerator1('G'); ArrayList<String> H = MaskGenerator.maskGenerator1('H');
        ArrayList<String> outcome = new ArrayList<>();
        for (int i = 0; i < C.size();i++){      //Here the choice of masks can be very different, the startPoints generated here are CxxExxGxx
            for (int j = 0; j < E.size();j++){  // the C, E and G should be changed when you need other startPoints until the number of startPoints
                for (int m = 0; m < G.size();m++) { // are enough.
                    String st = C.get(i)+E.get(j)+G.get(m);
                    if (StepsGame.isPlacementSequenceValid(st)){
                        if (st.length() == 9){
                            outcome.add(st);
                        }
                    }
                }
            }
        }
        return outcome;
    }

    /**
     * Helper for task 11
     * Get all the possible startPoints by printing them out each by each
     * P.s The number of combinations generated above is very large, so here I get 99 cnadidates first and see whether
     * there exists startPoints meet the requirement.
     * @return print all the results out, if it meets the requirements, then print it out, otherwise, print "Failed".
     */
    public static void main(String[] args) {
        ArrayList<String> result = new ArrayList<>();
        for (int i = 0; i < 100; i++){
            result.add(spGeneratorForThree().get(i));
        }
        for (String a : result){
            if (SolverForHint.Solutions(a).size()==1){ // print out all the startPoints which meets the requirements
                System.out.println(a);
            }else{
                System.out.println("Failed");
            }
        }
    }
}
